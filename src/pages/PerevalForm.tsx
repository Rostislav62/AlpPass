import React, { useState, useEffect } from "react"; // –ò–º–ø–æ—Ä—Ç React –∏ —Ö—É–∫–æ–≤
import { useParams, useNavigate } from "react-router-dom"; // –ò–º–ø–æ—Ä—Ç —Ö—É–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
import PhotosManager from "./PhotosManager"; // –ò–º–ø–æ—Ä—Ç PhotosManager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
import "../index.css"; // –ò–º–ø–æ—Ä—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å—Ç–∏–ª–µ–π

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–ø—Å–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
interface PerevalFormProps {
  darkMode: boolean; // –ü—Ä–æ–ø—Å –¥–ª—è —Ç—ë–º–Ω–æ–π —Ç–µ–º—ã
  toggleTheme: () => void; // –ü—Ä–æ–ø—Å –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–∞–ª–∞
interface ImageData {
  file: File; // –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  preview: string; // URL –ø—Ä–µ–≤—å—é
  title: string; // –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã (–æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–æ–ª—è –∏–∑ Submit.tsx –∏ EditPereval.tsx)
interface PerevalFormData {
  beautyTitle: string; // –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
  title: string; // –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞
  other_titles: string; // –î—Ä—É–≥–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
  connect: boolean; // –§–ª–∞–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞ true –¥–ª—è –Ω–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–∞–ª–æ–≤)
  user: {
    email: string; // Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    family_name: string; // –§–∞–º–∏–ª–∏—è
    first_name: string; // –ò–º—è
    father_name: string; // –û—Ç—á–µ—Å—Ç–≤–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    phone: string; // –¢–µ–ª–µ—Ñ–æ–Ω
  };
  coord: { latitude: string; longitude: string; height: string }; // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
  status: number; // –°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–∞–ª–∞
  difficulties: { season: number; difficulty: number }[]; // –°–µ–∑–æ–Ω –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
  route_description: string; // –û–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
  images: ImageData[]; // –ú–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–∞–ª–∞
}

// –°–ø–∏—Å–∫–∏ —Å–µ–∑–æ–Ω–æ–≤ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π (–∫–∞–∫ –≤ Submit.tsx –∏ EditPereval.tsx)
const seasons = [
  { id: 1, name: "–í–µ—Å–Ω–∞", code: "Spring" },
  { id: 2, name: "–õ–µ—Ç–æ", code: "Summer" },
  { id: 3, name: "–û—Å–µ–Ω—å", code: "Autumn" },
  { id: 4, name: "–ó–∏–º–∞", code: "Winter" },
];

const difficulties = [
  { id: 1, code: "1–ê", description: "–û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è", characteristics: "–ü–æ–ª–æ–≥–∏–µ —Å–∫–ª–æ–Ω—ã, –≤—ã—Å–æ—Ç–∞ –¥–æ 3000 –º", requirements: "–ë–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏, –æ–±—É–≤—å –¥–ª—è —Ç—Ä–µ–∫–∫–∏–Ω–≥–∞" },
  { id: 2, code: "1–ë", description: "–ü—Ä–æ—Å—Ç–∞—è", characteristics: "–ö—Ä—É—Ç—ã–µ —Å–∫–ª–æ–Ω—ã, —Å–Ω–µ–∂–Ω–∏–∫–∏, –≤—ã—Å–æ—Ç–∞ 3000‚Äì3500 –º", requirements: "–ù–∞–≤—ã–∫–∏ —Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ —Å–Ω–µ–≥—É, —Ç—Ä–µ–∫–∫–∏–Ω–≥–æ–≤—ã–µ –ø–∞–ª–∫–∏" },
  { id: 3, code: "2–ê", description: "–°—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏", characteristics: "–°–∫–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏, —Å–Ω–µ–∂–Ω—ã–µ –ø–æ–ª—è, –≤—ã—Å–æ—Ç–∞ 3500‚Äì4000 –º", requirements: "–í–µ—Ä—ë–≤–∫–∏, —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞, –±–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∞–ª—å–ø–∏–Ω–∏–∑–º–∞" },
  { id: 4, code: "2–ë", description: "–£–º–µ—Ä–µ–Ω–Ω–æ —Å–ª–æ–∂–Ω–∞—è", characteristics: "–°–ª–æ–∂–Ω—ã–µ —Å–∫–∞–ª—ã, –ª—ë–¥, –≤—ã—Å–æ—Ç–∞ 4000‚Äì4500 –º", requirements: "–ö–æ—à–∫–∏, –ª–µ–¥–æ—Ä—É–±, –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –≤–µ—Ä—ë–≤–∫–∞–º–∏" },
  { id: 5, code: "3–ê", description: "–°–ª–æ–∂–Ω–∞—è", characteristics: "–õ–µ–¥–æ–≤—ã–µ —É—á–∞—Å—Ç–∫–∏, –æ—Ç–≤–µ—Å–Ω—ã–µ —Å–∫–∞–ª—ã, –≤—ã—Å–æ—Ç–∞ 4500‚Äì5000 –º", requirements: "–ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –∞–ª—å–ø–∏–Ω–∏—Å—Ç—Å–∫–æ–≥–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è, –æ–ø—ã—Ç" },
  { id: 6, code: "3–ë", description: "–û—á–µ–Ω—å —Å–ª–æ–∂–Ω–∞—è", characteristics: "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, –≤—ã—Å–æ—Ç–∞ —Å–≤—ã—à–µ 5000 –º", requirements: "–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, –∫–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞" },
];

// –ë–∞–∑–æ–≤—ã–π URL API
const BASE_URL = "https://rostislav62.pythonanywhere.com";
const API_URL = `${BASE_URL}/api/submitData/`;
const IMAGE_API_URL = `${BASE_URL}/api/uploadImage/`; // URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

// –ù–∞–∑–≤–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
const slotLabels = ["–ü–æ–¥—ä—ë–º", "–°–µ–¥–ª–æ–≤–∏–Ω–∞", "–°–ø—É—Å–∫"];

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç PerevalForm
const PerevalForm: React.FC<PerevalFormProps> = ({ darkMode, toggleTheme }) => {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–µ—Ä–µ–≤–∞–ª–∞ –∏–∑ URL (–¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  const { id } = useParams<{ id: string }>();
  // –•—É–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const navigate = useNavigate();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
  const [formData, setFormData] = useState<PerevalFormData | null>(null);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
  const [submitStatus, setSubmitStatus] = useState<string | null>(null);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ GPS
  const [loadingGPS, setLoadingGPS] = useState(false);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–µ–∑–æ–Ω–∞
  const [showSeasonModal, setShowSeasonModal] = useState(false);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  const [showDifficultyModal, setShowDifficultyModal] = useState(false);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ID –ø–µ—Ä–µ–≤–∞–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è PhotosManager –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  const [perevalId, setPerevalId] = useState<string | null>(id || null);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
  const [selectedImage, setSelectedImage] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–∞–ª–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    // –ï—Å–ª–∏ –µ—Å—Ç—å ID, —ç—Ç–æ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (id) {
      fetch(`${API_URL}${id}/info/`)
        .then(async response => {
          const text = await response.text(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
          console.log("üì• –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–ø–µ—Ä–µ–≤–∞–ª):", text);
          try {
            return JSON.parse(text); // –ü–∞—Ä—Å–∏–º JSON
          } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", text);
            throw new Error("–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON-–æ—Ç–≤–µ—Ç");
          }
        })
        .then((data: PerevalFormData) => {
          const userEmail = localStorage.getItem("user_email") || "";
          const userPhone = localStorage.getItem("user_phone") || "";
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–≤–∞–ª –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
          if (
            data.status === 1 &&
            data.user.email.trim().toLowerCase() === userEmail.trim().toLowerCase() &&
            data.user.phone.replace(/\s+/g, "") === userPhone.replace(/\s+/g, "")
          ) {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ API
            setFormData({
              ...data,
              coord: {
                latitude: data.coord.latitude.toString(),
                longitude: data.coord.longitude.toString(),
                height: data.coord.height.toString(),
              },
              difficulties: data.difficulties.length > 0 ? data.difficulties : [{ season: 0, difficulty: 0 }],
              connect: true, // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, —Ö–æ—Ç—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ PATCH
              images: [], // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, —Ö–æ—Ç—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ PATCH
            });
          } else {
            setErrorMessage("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ! –õ–∏–±–æ —Å—Ç–∞—Ç—É—Å –Ω–µ new, –ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.");
          }
        })
        .catch(error => {
          console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–∞–ª–∞:", error);
          setErrorMessage("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–∞–ª–∞.");
        });
    } else {
      // –ï—Å–ª–∏ ID –Ω–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—É—é —Ñ–æ—Ä–º—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–∞–ª–∞
      setFormData({
        beautyTitle: "",
        title: "",
        other_titles: "",
        connect: true, // –í—Å–µ–≥–¥–∞ true –¥–ª—è –Ω–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–∞–ª–æ–≤
        user: {
          email: localStorage.getItem("user_email") || "",
          family_name: localStorage.getItem("user_family_name") || "",
          first_name: localStorage.getItem("user_first_name") || "",
          father_name: "",
          phone: localStorage.getItem("user_phone") || "",
        },
        coord: { latitude: "", longitude: "", height: "" },
        status: 1, // –ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–∞–ª
        difficulties: [{ season: 0, difficulty: 0 }],
        route_description: "",
        images: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      });
    }
  }, [id]);

  // –û—á–∏—Å—Ç–∫–∞ URL.createObjectURL –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  useEffect(() => {
    return () => {
      if (formData?.images) {
        formData.images.forEach(image => {
          URL.revokeObjectURL(image.preview); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
        });
      }
    };
  }, [formData?.images]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    if (!formData) return;
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev!,
      [name]: value,
    }));
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
  const handleCoordChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!formData) return;
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev!,
      coord: {
        ...prev!.coord,
        [name]: value,
      },
    }));
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è GPS-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–∞–ª–æ–≤)
  const handleGetGPS = () => {
    if (!formData || id) return; // GPS —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–∞–ª–æ–≤
    if ("geolocation" in navigator) {
      setLoadingGPS(true);
      setErrorMessage(null);
      navigator.geolocation.getCurrentPosition(
        (position) => {
          setFormData(prev => ({
            ...prev!,
            coord: {
              latitude: position.coords.latitude.toFixed(6),
              longitude: position.coords.longitude.toFixed(6),
              height: position.coords.altitude ? position.coords.altitude.toFixed(0) : prev!.coord.height,
            },
          }));
          setLoadingGPS(false);
          if (!position.coords.altitude) {
            setErrorMessage("‚ö†Ô∏è –í—ã—Å–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é");
          }
        },
        (error) => {
          setErrorMessage(`‚ùå –û—à–∏–±–∫–∞ GPS: ${error.message}`);
          setLoadingGPS(false);
        },
        { enableHighAccuracy: true }
      );
    } else {
      setErrorMessage("‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º");
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞/—Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  const handleDifficultyChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!formData) return;
    const { name, value } = e.target;
    const newValue = parseInt(value, 10);
    if (isNaN(newValue)) {
      console.error(`–û—à–∏–±–∫–∞: ${name} –ø–æ–ª—É—á–∏–ª –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ "${value}"`);
      return;
    }
    setFormData(prev => ({
      ...prev!,
      difficulties: [{ ...prev!.difficulties[0], [name]: newValue }],
    }));
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–ª–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const handleImageChange = (index: number, e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (!formData || !files || files.length === 0) return;
    const file = files[0];
    const newImage: ImageData = {
      file,
      preview: URL.createObjectURL(file),
      title: `${index + 1}_${file.name}`,
    };
    setFormData(prev => ({
      ...prev!,
      images: prev!.images
        .slice(0, index)
        .concat([newImage])
        .concat(prev!.images.slice(index + 1))
        .slice(0, 3), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç—Ä–µ–º—è —Å–ª–æ—Ç–∞–º–∏
    }));
    setErrorMessage(null);
    e.target.value = ""; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º input
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Drag-and-Drop –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const handleDrop = (index: number, e: React.DragEvent<HTMLLabelElement>) => {
    e.preventDefault();
    if (!formData) return;
    const files = e.dataTransfer.files;
    if (files && files.length > 0) {
      const file = files[0];
      if (!file.type.startsWith("image/")) {
        setErrorMessage("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!");
        return;
      }
      const newImage: ImageData = {
        file,
        preview: URL.createObjectURL(file),
        title: `${index + 1}_${file.name}`,
      };
      setFormData(prev => ({
        ...prev!,
        images: prev!.images
          .slice(0, index)
          .concat([newImage])
          .concat(prev!.images.slice(index + 1))
          .slice(0, 3), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç—Ä–µ–º—è —Å–ª–æ—Ç–∞–º–∏
      }));
      setErrorMessage(null);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è dragover
  const handleDragOver = (e: React.DragEvent<HTMLLabelElement>) => {
    e.preventDefault();
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const handleDeleteLocal = (index: number) => {
    if (!formData) return;
    setFormData(prev => {
      const updatedImages = [...prev!.images];
      if (updatedImages[index]) {
        URL.revokeObjectURL(updatedImages[index].preview); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
      }
      updatedImages[index] = null as any; // –û—á–∏—â–∞–µ–º —Å–ª–æ—Ç
      return {
        ...prev!,
        images: updatedImages,
      };
    });
    setErrorMessage(null);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Ñ–æ—Ç–æ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è
  const handleImageClick = (preview: string) => {
    setSelectedImage(preview);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
  const closeModal = () => {
    setSelectedImage(null);
  };

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–µ–∑–æ–Ω–∞
  const confirmSeasonModal = () => {
    setShowSeasonModal(false);
  };

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  const confirmDifficultyModal = () => {
    setShowDifficultyModal(false);
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞
  const getSeasonText = () => {
    if (!formData) return "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω";
    const seasonId = formData.difficulties[0].season;
    const season = seasons.find(s => s.id === seasonId);
    return season ? `${season.name} (${season.code})` : "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω";
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  const getDifficultyText = () => {
    if (!formData) return "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é";
    const difficultyId = formData.difficulties[0].difficulty;
    const difficulty = difficulties.find(d => d.id === difficultyId);
    return difficulty ? `${difficulty.code} - ${difficulty.description}` : "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é";
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã (–¥–ª—è –Ω–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–∞–ª–æ–≤)
  const validateForm = () => {
    if (!formData) return "–§–æ—Ä–º–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞";
    if (!formData.beautyTitle) return "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ";
    if (!formData.title) return "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ";
    if (!formData.user.email) return "Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.";
    if (!formData.coord.latitude) return "–®–∏—Ä–æ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞";
    if (!formData.coord.longitude) return "–î–æ–ª–≥–æ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞";
    if (!formData.coord.height) return "–í—ã—Å–æ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞";
    if (formData.difficulties[0].season === 0) return "–°–µ–∑–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω";
    if (formData.difficulties[0].difficulty === 0) return "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞";
    return null;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!formData) return;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const validationError = validateForm();
    if (validationError) {
      setErrorMessage(`‚ùå ${validationError}`);
      console.log("–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ formData:", formData);
      return;
    }

    setSubmitStatus("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞...");
    setErrorMessage(null);

    try {
      let response;
      if (id) {
        // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (PATCH) ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
        const updatedData = {
          email: formData.user.email,
          beautyTitle: formData.beautyTitle,
          title: formData.title,
          other_titles: formData.other_titles,
          coord: {
            latitude: Number(formData.coord.latitude),
            longitude: Number(formData.coord.longitude),
            height: Number(formData.coord.height),
          },
          route_description: formData.route_description,
          difficulties: formData.difficulties,
        };

        console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", updatedData);
        response = await fetch(`${API_URL}${id}/update/`, {
          method: "PATCH",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(updatedData),
        });
      } else {
        // –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è (POST): —ç—Ç–∞–ø 1 ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–∞–ª–∞
        const submitData = {
          beautyTitle: formData.beautyTitle,
          title: formData.title,
          other_titles: formData.other_titles,
          connect: formData.connect,
          user: {
            email: formData.user.email,
            family_name: formData.user.family_name,
            first_name: formData.user.first_name,
            father_name: formData.user.father_name,
            phone: formData.user.phone,
          },
          coord: {
            latitude: Number(formData.coord.latitude),
            longitude: Number(formData.coord.longitude),
            height: Number(formData.coord.height),
          },
          status: formData.status,
          difficulties: formData.difficulties,
          route_description: formData.route_description,
          images: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è POST
        };

        console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–∞–ª–∞:", submitData);
        response = await fetch(API_URL, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(submitData),
        });
      }

      const data = await response.json();
      console.log("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);

      if (id && response.status === 200 && data.state === 1) {
        // –£—Å–ø–µ—à–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        setSubmitStatus("‚úÖ –ü–µ—Ä–µ–≤–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!");
        setTimeout(() => navigate(`/pereval/${id}`), 1000);
      } else if (!id && response.ok && data.id) {
        // –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ: —ç—Ç–∞–ø 2 ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        setPerevalId(data.id);
        localStorage.setItem("last_pereval_id", data.id);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        const imagesToUpload = formData.images.filter(img => img !== null) as ImageData[];
        if (imagesToUpload.length > 0) {
          setSubmitStatus("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...");
          for (let index = 0; index < imagesToUpload.length; index++) {
            const image = imagesToUpload[index];
            const formDataUpload = new FormData();
            formDataUpload.append("pereval_id", data.id);
            formDataUpload.append("image", image.file);
            formDataUpload.append("title", image.title);

            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${image.title}`);
            const uploadResponse = await fetch(IMAGE_API_URL, {
              method: "POST",
              body: formDataUpload,
            });

            const uploadData = await uploadResponse.json();
            if (!uploadResponse.ok) {
              throw new Error(uploadData.message || `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${image.title}`);
            }
            console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${image.title} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:`, uploadData);
          }
        }

        // –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        setSubmitStatus("‚úÖ –ü–µ—Ä–µ–≤–∞–ª –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!");
        setTimeout(() => navigate(`/pereval/${data.id}`), 1000);
      } else {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        if (response.status === 400) {
          setErrorMessage(`‚ùå ${data.message || "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ: —Å—Ç–∞—Ç—É—Å –Ω–µ new"}`);
        } else if (response.status === 403) {
          setErrorMessage(`‚ùå ${data.message || "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–∞–ª–∞"}`);
        } else if (response.status === 404) {
          setErrorMessage(`‚ùå ${data.message || "–ü–µ—Ä–µ–≤–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}`);
        } else {
          throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${JSON.stringify(data)}`);
        }
        setSubmitStatus(null);
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
      setErrorMessage(`‚ùå ${error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`);
      setSubmitStatus(null);
    }
  };

  // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  if (!formData) return <p className="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞...</p>;

  return (
    <div className={`submit-container ${darkMode ? "dark-mode" : "light-mode"}`}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã */}
      <h1 className="submit-title">{id ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–∞–ª" : "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–µ—Ä–µ–≤–∞–ª"}</h1>
      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
      {errorMessage && <p className="error-message">{errorMessage}</p>}
      {/* –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
      {submitStatus && <p className="submit-status">{submitStatus}</p>}

      {/* –§–æ—Ä–º–∞ */}
      <form onSubmit={handleSubmit} className="submit-form">
        {/* –°–µ–∫—Ü–∏—è: –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–∞–ª–∞ */}
        <fieldset className="submit-section">
          <legend>–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–∞–ª–∞</legend>
          <div className="form-group">
            <label htmlFor="beautyTitle">–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞:</label>
            <input
              type="text"
              id="beautyTitle"
              name="beautyTitle"
              value={formData.beautyTitle}
              onChange={handleChange}
              className="submit-input"
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="title">–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞:</label>
            <input
              type="text"
              id="title"
              name="title"
              value={formData.title}
              onChange={handleChange}
              className="submit-input"
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="other_titles">–î—Ä—É–≥–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è:</label>
            <input
              type="text"
              id="other_titles"
              name="other_titles"
              value={formData.other_titles}
              onChange={handleChange}
              className="submit-input"
            />
          </div>
          <div className="form-group">
            <label htmlFor="route_description">–û–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞:</label>
            <textarea
              id="route_description"
              name="route_description"
              value={formData.route_description}
              onChange={handleChange}
              className="submit-input"
              rows={3}
            />
          </div>
        </fieldset>

        {/* –°–µ–∫—Ü–∏—è: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã */}
        <fieldset className="submit-section">
          <legend>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</legend>
          <div className="form-group">
            <label htmlFor="latitude">–®–∏—Ä–æ—Ç–∞:</label>
            <input
              type="text"
              id="latitude"
              name="latitude"
              value={formData.coord.latitude}
              onChange={handleCoordChange}
              className="submit-input"
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="longitude">–î–æ–ª–≥–æ—Ç–∞:</label>
            <input
              type="text"
              id="longitude"
              name="longitude"
              value={formData.coord.longitude}
              onChange={handleCoordChange}
              className="submit-input"
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="height">–í—ã—Å–æ—Ç–∞:</label>
            <input
              type="text"
              id="height"
              name="height"
              value={formData.coord.height}
              onChange={handleCoordChange}
              className="submit-input"
              required
            />
          </div>
          {/* –ö–Ω–æ–ø–∫–∞ GPS (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–∞–ª–æ–≤) */}
          {!id && (
            <button type="button" onClick={handleGetGPS} disabled={loadingGPS} className="gps-btn">
              {loadingGPS ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–ü–æ–ª—É—á–∏—Ç—å —Å GPS"}
            </button>
          )}
        </fieldset>

        {/* –°–µ–∫—Ü–∏—è: –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ */}
        <fieldset className="submit-section">
          <legend>–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</legend>
          <div className="form-group">
            <label htmlFor="season">–°–µ–∑–æ–Ω:</label>
            <div
              className="submit-input submit-choice"
              onClick={() => setShowSeasonModal(true)}
            >
              {getSeasonText()}
            </div>
          </div>
          <div className="form-group">
            <label htmlFor="difficulty">–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:</label>
            <div
              className="submit-input submit-choice"
              onClick={() => setShowDifficultyModal(true)}
            >
              {getDifficultyText()}
            </div>
          </div>
        </fieldset>

        {/* –°–µ–∫—Ü–∏—è: –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ */}
        {id ? (
          // –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º PhotosManager
          perevalId && (
            <fieldset className="submit-section">
              <legend>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</legend>
              <PhotosManager darkMode={darkMode} toggleTheme={toggleTheme} />
            </fieldset>
          )
        ) : (
          // –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–∞–ª–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç—Ä–∏ —Å–ª–æ—Ç–∞ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
          <fieldset className="submit-section">
            <legend>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</legend>
            <div className="photo-slots">
              {[0, 1, 2].map(index => (
                <div key={index} className="photo-slot">
                  {formData.images[index] ? (
                    // –õ–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    <div className="image-item">
                      <img
                        src={formData.images[index].preview}
                        alt={slotLabels[index]}
                        className="image-preview"
                        onClick={() => handleImageClick(formData.images[index].preview)}
                      />
                      <span className="slot-label slot-title">{slotLabels[index]}</span>
                      <div className="image-actions">
                        <button
                          onClick={() => handleDeleteLocal(index)}
                          className="delete-btn"
                        >
                          –£–¥–∞–ª–∏—Ç—å
                        </button>
                      </div>
                    </div>
                  ) : (
                    // –ü—É—Å—Ç–æ–π —Å–ª–æ—Ç
                    <label
                      className="photo-placeholder"
                      onDragOver={handleDragOver}
                      onDrop={(e) => handleDrop(index, e)}
                    >
                      <input
                        type="file"
                        accept="image/*"
                        onChange={(e) => handleImageChange(index, e)}
                        className="hidden-input"
                      />
                      <span className="slot-label">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ, –Ω–∞–∂–∞–≤ –∑–¥–µ—Å—å</span>
                      <span className="slot-label slot-title">{slotLabels[index]}</span>
                    </label>
                  )}
                </div>
              ))}
            </div>
          </fieldset>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
        <button type="submit" className="submit-btn">{id ? "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è" : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}</button>
      </form>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ */}
      {selectedImage && (
        <div className="modal" onClick={closeModal}>
          <img src={selectedImage} alt="–£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ" className="modal-image" />
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ–∑–æ–Ω–∞ */}
      {showSeasonModal && (
        <div className="modal" onClick={() => setShowSeasonModal(false)}>
          <div className="modal-content" onClick={e => e.stopPropagation()}>
            <h2>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω</h2>
            <div className="radio-container">
              {seasons.map(season => (
                <div key={season.id} className="radio-box">
                  <input
                    type="radio"
                    id={`season-${season.id}`}
                    name="season"
                    value={season.id}
                    checked={formData.difficulties[0].season === season.id}
                    onChange={handleDifficultyChange}
                  />
                  <label htmlFor={`season-${season.id}`}>
                    {season.name} ({season.code})
                  </label>
                </div>
              ))}
            </div>
            <button className="modal-btn" onClick={confirmSeasonModal}>
              –í—ã–±—Ä–∞—Ç—å
            </button>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ */}
      {showDifficultyModal && (
        <div className="modal" onClick={() => setShowDifficultyModal(false)}>
          <div className="modal-content" onClick={e => e.stopPropagation()}>
            <h2>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</h2>
            <div className="radio-container">
              {difficulties.map(diff => (
                <div key={diff.id} className="radio-box">
                  <input
                    type="radio"
                    id={`difficulty-${diff.id}`}
                    name="difficulty"
                    value={diff.id}
                    checked={formData.difficulties[0].difficulty === diff.id}
                    onChange={handleDifficultyChange}
                  />
                  <label htmlFor={`difficulty-${diff.id}`}>
                    {diff.code} - {diff.description}
                  </label>
                </div>
              ))}
            </div>
            <button className="modal-btn" onClick={confirmDifficultyModal}>
              –í—ã–±—Ä–∞—Ç—å
            </button>
          </div>
        </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã */}
      <button onClick={toggleTheme} className="theme-btn">
        {darkMode ? "–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞" : "–¢—ë–º–Ω–∞—è —Ç–µ–º–∞"}
      </button>
    </div>
  );
};

export default PerevalForm; // –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞