import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import "../index.css";

interface EditPerevalProps {
    darkMode: boolean;
    toggleTheme: () => void;
}

interface PerevalData {
    beautyTitle: string;
    title: string;
    other_titles: string;
    coord: { latitude: number; longitude: number; height: number };
    user: { email: string; phone: string };
    status: number;
}

interface Photo {
    id: number;
    file_name: string;
    title: string;
}

const BASE_URL = "http://127.0.0.1:8000";
const API_URL = `${BASE_URL}/api/submitData/`;
const PHOTOS_API_URL = `${BASE_URL}/api/uploadImage/photos/`;
const MEDIA_URL = `${BASE_URL}/media/`;

const EditPereval: React.FC<EditPerevalProps> = ({ darkMode, toggleTheme }) => {
    const { id } = useParams<{ id: string }>();
    const navigate = useNavigate();
    const [formData, setFormData] = useState<PerevalData | null>(null);
    const [photos, setPhotos] = useState<Photo[]>([]);
    const [selectedImage, setSelectedImage] = useState<string | null>(null);
    const [errorMessage, setErrorMessage] = useState<string | null>(null);
    const userEmail = localStorage.getItem("user_email") || "";
    const userPhone = localStorage.getItem("user_phone") || "";

    useEffect(() => {
        if (!id) {
            console.error("‚ùå –û—à–∏–±–∫–∞: ID –ø–µ—Ä–µ–≤–∞–ª–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
            alert("–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–≤–∞–ª –±–µ–∑ ID.");
            return;
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–∞–ª–∞
        fetch(`${API_URL}${id}/info/`)
            .then(async response => {
                const text = await response.text();
                console.log("üì• –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–ø–µ—Ä–µ–≤–∞–ª):", text);
                try {
                    return JSON.parse(text);
                } catch (error) {
                    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", text);
                    throw new Error("–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON-–æ—Ç–≤–µ—Ç");
                }
            })
            .then((data: PerevalData) => {
                if (
                    data.status === 1 &&
                    data.user.email.trim().toLowerCase() === userEmail.trim().toLowerCase() &&
                    data.user.phone.replace(/\s+/g, '') === userPhone.replace(/\s+/g, '')
                ) {
                    setFormData({ ...data });
                } else {
                    alert("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ! –õ–∏–±–æ —Å—Ç–∞—Ç—É—Å –Ω–µ new, –ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.");
                }
            })
            .catch(error => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–∞–ª–∞:", error));

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        fetch(`${PHOTOS_API_URL}${id}/`)
            .then(async response => {
                const data = await response.json();
                console.log("üì• –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (—Ñ–æ—Ç–æ):", data);
                if (!response.ok) throw new Error(data.message || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ");
                if (data.state === 1 && Array.isArray(data.photos)) {
                    setPhotos(data.photos);
                } else {
                    setPhotos([]);
                }
            })
            .catch(error => {
                console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:", error);
                setPhotos([]);
            });
    }, [id, userEmail, userPhone]);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        if (!formData) return;
        const { name, value } = e.target;
        setFormData(prev => ({
            ...(prev as PerevalData),
            [name]: value
        }));
    };

    const handleCoordChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        if (!formData) return;
        const { name, value } = e.target;
        setFormData(prev => {
            if (!prev) return prev;
            return {
                ...prev,
                coord: {
                    ...prev.coord,
                    [name]: Number(value)
                }
            };
        });
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!formData) return;

        const email = localStorage.getItem("user_email");
        if (!email) {
            setErrorMessage("‚ùå Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.");
            return;
        }

        const updatedData = {
            email,
            beautyTitle: formData.beautyTitle,
            title: formData.title,
            other_titles: formData.other_titles,
            coord: formData.coord
        };

        try {
            const response = await fetch(`${API_URL}${id}/update/`, {
                method: "PATCH",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(updatedData)
            });

            const data = await response.json();
            if (response.status === 200 && data.state === 1) {
                alert("‚úÖ –ü–µ—Ä–µ–≤–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!");
                setErrorMessage(null);
            } else if (response.status === 400) {
                setErrorMessage(`‚ùå ${data.message || "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ: —Å—Ç–∞—Ç—É—Å –Ω–µ new"}`);
            } else if (response.status === 403) {
                setErrorMessage(`‚ùå ${data.message || "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–∞–ª–∞"}`);
            } else if (response.status === 404) {
                setErrorMessage(`‚ùå ${data.message || "–ü–µ—Ä–µ–≤–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}`);
            } else {
                throw new Error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏");
            }
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error);
            setErrorMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–µ—Ä–µ–≤–∞–ª–∞");
        }
    };

    const handleImageClick = (preview: string) => {
        setSelectedImage(preview);
    };

    const closeModal = () => {
        setSelectedImage(null);
    };

    if (!formData) return <p className="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞...</p>;

    return (
        <div className={`submit-container ${darkMode ? "dark-mode" : "light-mode"}`}>
            <h1 className="submit-title">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–∞–ª</h1>
            {errorMessage && <p className="error-message">{errorMessage}</p>}
            <form onSubmit={handleSubmit} className="submit-form">
                <fieldset className="submit-section">
                    <legend>–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–∞–ª–∞</legend>
                    <div className="form-group">
                        <label htmlFor="title">–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞:</label>
                        <input
                            type="text"
                            id="title"
                            name="title"
                            value={formData.title}
                            onChange={handleChange}
                            className="submit-input"
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label htmlFor="beautyTitle">–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞:</label>
                        <input
                            type="text"
                            id="beautyTitle"
                            name="beautyTitle"
                            value={formData.beautyTitle}
                            onChange={handleChange}
                            className="submit-input"
                            required
                        />
                    </div>
                </fieldset>

                <fieldset className="submit-section">
                    <legend>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</legend>
                    <div className="form-group">
                        <label htmlFor="latitude">–®–∏—Ä–æ—Ç–∞:</label>
                        <input
                            type="number"
                            id="latitude"
                            name="latitude"
                            value={formData.coord.latitude}
                            onChange={handleCoordChange}
                            className="submit-input"
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label htmlFor="longitude">–î–æ–ª–≥–æ—Ç–∞:</label>
                        <input
                            type="number"
                            id="longitude"
                            name="longitude"
                            value={formData.coord.longitude}
                            onChange={handleCoordChange}
                            className="submit-input"
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label htmlFor="height">–í—ã—Å–æ—Ç–∞:</label>
                        <input
                            type="number"
                            id="height"
                            name="height"
                            value={formData.coord.height}
                            onChange={handleCoordChange}
                            className="submit-input"
                            required
                        />
                    </div>
                </fieldset>

                <fieldset className="submit-section">
                    <legend>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–µ—Ä–µ–≤–∞–ª–∞</legend>
                    <div className="photos-list">
                        {photos.length > 0 ? (
                            photos.map(photo => (
                                <div key={photo.id} className="photo-item">
                                    <img
                                        src={`${MEDIA_URL}${photo.file_name.replace("\\", "/")}`}
                                        alt={photo.title || photo.file_name}
                                        className="photo-preview"
                                        onClick={() => handleImageClick(`${MEDIA_URL}${photo.file_name.replace("\\", "/")}`)}
                                    />
                                    <span>{photo.title || photo.file_name}</span>
                                </div>
                            ))
                        ) : (
                            <p>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>
                        )}
                    </div>
                    <button
                        type="button"
                        onClick={() => navigate(`/edit-photos/${id}`)}
                        className="submit-btn"
                    >
                        –ó–∞–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                    </button>
                </fieldset>

                <button type="submit" className="submit-btn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</button>
            </form>
            {selectedImage && (
                <div className="modal" onClick={closeModal}>
                    <img src={selectedImage} alt="–£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ" className="modal-image" />
                </div>
            )}
            <button onClick={toggleTheme} className="theme-btn">
                {darkMode ? "–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞" : "–¢—ë–º–Ω–∞—è —Ç–µ–º–∞"}
            </button>
        </div>
    );
};

export default EditPereval;