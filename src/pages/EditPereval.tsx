import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { generateFileName } from "../utils/generateFileName";
import { loadImages } from "../utils/loadImages";
import { uploadImages } from "../utils/uploadImages";
import "../index.css";

// üìå –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–ø—Å–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
interface EditPerevalProps {
  darkMode: boolean;
  toggleTheme: () => void;
}

// üìå –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
export interface ImageData {
  file?: File;
  preview: string;
  title: string;
  id?: number;
  data?: string;
  isModified: boolean;
}

// üìå –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
export interface PerevalFormData {
  beautyTitle: string;
  title: string;
  other_titles: string;
  connect: boolean;
  user: {
    email: string;
    family_name: string;
    first_name: string;
    father_name: string;
    phone: string;
  };
  coord: { latitude: string; longitude: string; height: string };
  status: number;
  difficulties: { season: number; difficulty: number }[];
  route_description: string;
  images: (ImageData | null)[];
}

// üìå –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –≤ handleSubmit
interface PerevalResponse {
  state: number;
  message?: string;
}

// üìå –°–ø–∏—Å–∫–∏ —Å–µ–∑–æ–Ω–æ–≤ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π
const seasons = [
  { id: 1, name: "–í–µ—Å–Ω–∞", code: "Spring" },
  { id: 2, name: "–õ–µ—Ç–æ", code: "Summer" },
  { id: 3, name: "–û—Å–µ–Ω—å", code: "Autumn" },
  { id: 4, name: "–ó–∏–º–∞", code: "Winter" },
];

const difficulties = [
  { id: 1, code: "1–ê", description: "–û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è", characteristics: "–ü–æ–ª–æ–≥–∏–µ —Å–∫–ª–æ–Ω—ã, –≤—ã—Å–æ—Ç–∞ –¥–æ 3000 –º", requirements: "–ë–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏, –æ–±—É–≤—å –¥–ª—è —Ç—Ä–µ–∫–∫–∏–Ω–≥–∞" },
  { id: 2, code: "1–ë", description: "–ü—Ä–æ—Å—Ç–∞—è", characteristics: "–ö—Ä—É—Ç—ã–µ —Å–∫–ª–æ–Ω—ã, —Å–Ω–µ–∂–Ω–∏–∫–∏, –≤—ã—Å–æ—Ç–∞ 3000‚Äì3500 –º", requirements: "–ù–∞–≤—ã–∫–∏ —Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ —Å–Ω–µ–≥—É, —Ç—Ä–µ–∫–∫–∏–Ω–≥–æ–≤—ã–µ –ø–∞–ª–∫–∏" },
  { id: 3, code: "2–ê", description: "–°—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏", characteristics: "–°–∫–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏, —Å–Ω–µ–∂–Ω—ã–µ –ø–æ–ª—è, –≤—ã—Å–æ—Ç–∞ 3500‚Äì4000 –º", requirements: "–í–µ—Ä—ë–≤–∫–∏, —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞, –±–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∞–ª—å–ø–∏–Ω–∏–∑–º–∞" },
  { id: 4, code: "2–ë", description: "–£–º–µ—Ä–µ–Ω–Ω–æ —Å–ª–æ–∂–Ω–∞—è", characteristics: "–°–ª–æ–∂–Ω—ã–µ —Å–∫–∞–ª—ã, –ª—ë–¥, –≤—ã—Å–æ—Ç–∞ 4000‚Äì4500 –º", requirements: "–ö–æ—à–∫–∏, –ª–µ–¥–æ—Ä—É–±, –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –≤–µ—Ä—ë–≤–∫–∞–º–∏" },
  { id: 5, code: "3–ê", description: "–°–ª–æ–∂–Ω–∞—è", characteristics: "–õ–µ–¥–æ–≤—ã–µ —É—á–∞—Å—Ç–∫–∏, –æ—Ç–≤–µ—Å–Ω—ã–µ —Å–∫–∞–ª—ã, –≤—ã—Å–æ—Ç–∞ 4500‚Äì5000 –º", requirements: "–ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –∞–ª—å–ø–∏–Ω–∏—Å—Ç—Å–∫–æ–≥–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è, –æ–ø—ã—Ç" },
  { id: 6, code: "3–ë", description: "–û—á–µ–Ω—å —Å–ª–æ–∂–Ω–∞—è", characteristics: "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, –≤—ã—Å–æ—Ç–∞ —Å–≤—ã—à–µ 5000 –º", requirements: "–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, –∫–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞" },
];

// üìå –ë–∞–∑–æ–≤—ã–µ URL API
const BASE_URL = "https://rostislav62.pythonanywhere.com";
const API_URL = `${BASE_URL}/api/submitData/`;
// const IMAGE_API_URL = `${BASE_URL}/api/uploadImage/`;
// const MEDIA_URL = `${BASE_URL}/media/`;

// üìå –ù–∞–∑–≤–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
const slotLabels = ["–ü–æ–¥—ä—ë–º", "–°–µ–¥–ª–æ–≤–∏–Ω–∞", "–°–ø—É—Å–∫"];

// üìå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç EditPereval
const EditPereval: React.FC<EditPerevalProps> = ({ darkMode, toggleTheme }) => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [formData, setFormData] = useState<PerevalFormData | null>(null);
  const [initialFormData, setInitialFormData] = useState<PerevalFormData | null>(null);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [submitStatus, setSubmitStatus] = useState<string | null>(null);
  const [loadingGPS, setLoadingGPS] = useState(false);
  const [showSeasonModal, setShowSeasonModal] = useState(false);
  const [showDifficultyModal, setShowDifficultyModal] = useState(false);
  const userEmail = localStorage.getItem("user_email") || "";
  const userPhone = localStorage.getItem("user_phone") || "";

  // üìå –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–∞–ª–∞
  useEffect(() => {
    if (!id) {
      console.error("‚ùå –û—à–∏–±–∫–∞: ID –ø–µ—Ä–µ–≤–∞–ª–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
      setErrorMessage("–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–≤–∞–ª –±–µ–∑ ID.");
      return;
    }

    fetch(`${API_URL}${id}/info/`)
      .then(async response => {
        const text = await response.text();
        console.log("üì• –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–ø–µ—Ä–µ–≤–∞–ª):", text);
        try {
          return JSON.parse(text);
        } catch (error) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", text);
          throw new Error("–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON-–æ—Ç–≤–µ—Ç");
        }
      })
      .then((data: any) => {
        if (
          data.status === 1 &&
          data.user.email.trim().toLowerCase() === userEmail.trim().toLowerCase() &&
          data.user.phone.replace(/\s+/g, "") === userPhone.replace(/\s+/g, "")
        ) {
          const season = seasons.find(s => s.code === data.difficulties[0]?.season?.code) || { id: 0 };
          const difficulty = difficulties.find(d => d.code === data.difficulties[0]?.difficulty?.code) || { id: 0 };

          const images = loadImages(data.images || []);

          const formData = {
            beautyTitle: data.beautyTitle || "",
            title: data.title || "",
            other_titles: data.other_titles || "",
            connect: data.connect || true,
            user: {
              email: data.user.email || "",
              family_name: data.user.family_name || "",
              first_name: data.user.first_name || "",
              father_name: data.user.father_name || "",
              phone: data.user.phone || "",
            },
            coord: {
              latitude: data.coord.latitude?.toString() || "",
              longitude: data.coord.longitude?.toString() || "",
              height: data.coord.height?.toString() || "",
            },
            status: data.status || 1,
            difficulties: [{ season: season.id, difficulty: difficulty.id }],
            route_description: data.route_description || "",
            images,
          };

          setFormData(formData);
          setInitialFormData(formData);
        } else {
          setErrorMessage("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ! –õ–∏–±–æ —Å—Ç–∞—Ç—É—Å –Ω–µ new, –ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.");
        }
      })
      .catch(error => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–∞–ª–∞:", error);
        setErrorMessage("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–∞–ª–∞");
      });
  }, [id, userEmail, userPhone]);

  // üìå –û—á–∏—Å—Ç–∫–∞ URL.createObjectURL –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–≤—å—é
  useEffect(() => {
    return () => {
      if (formData?.images) {
        formData.images.forEach(image => {
          if (image && image.preview && !image.id && image.isModified) {
            URL.revokeObjectURL(image.preview);
          }
        });
      }
    };
  }, [formData?.images]);

  // üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    if (!formData) return;
    const { name, value } = e.target;
    console.log(`‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è ${name}:`, value);
    setFormData(prev => ({
      ...prev!,
      [name]: value,
    }));
  };

  // üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
  const handleCoordChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!formData) return;
    const { name, value } = e.target;
    console.log(`üìç –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ${name}:`, value);
    setFormData(prev => ({
      ...prev!,
      coord: {
        ...prev!.coord,
        [name]: value,
      },
    }));
  };

  // üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è GPS-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
  const handleGetGPS = () => {
    if (!formData) return;
    if ("geolocation" in navigator) {
      setLoadingGPS(true);
      setErrorMessage(null);
      navigator.geolocation.getCurrentPosition(
        (position) => {
          setFormData(prev => ({
            ...prev!,
            coord: {
              latitude: position.coords.latitude.toFixed(6),
              longitude: position.coords.longitude.toFixed(6),
              height: position.coords.altitude ? position.coords.altitude.toFixed(0) : prev!.coord.height,
            },
          }));
          setLoadingGPS(false);
          if (!position.coords.altitude) {
            setErrorMessage("‚ö†Ô∏è –í—ã—Å–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é");
          }
        },
        (error) => {
          setErrorMessage(`‚ùå –û—à–∏–±–∫–∞ GPS: ${error.message}`);
          setLoadingGPS(false);
        },
        { enableHighAccuracy: true }
      );
    } else {
      setErrorMessage("‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º");
    }
  };

  // üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞/—Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  const handleDifficultyChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!formData) return;
    const { name, value } = e.target;
    const newValue = parseInt(value, 10);
    if (isNaN(newValue)) {
      console.error(`‚ùå –û—à–∏–±–∫–∞: ${name} –ø–æ–ª—É—á–∏–ª –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ "${value}"`);
      return;
    }
    console.log(`üèîÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ ${name}:`, newValue);
    setFormData(prev => ({
      ...prev!,
      difficulties: [{ ...prev!.difficulties[0], [name]: newValue }],
    }));
  };

  // üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–ª–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const handleImageChange = (index: number, e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (!formData || !files || files.length === 0) return;
    const file = files[0];

    // üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    if (!["image/jpeg", "image/png"].includes(file.type)) {
      setErrorMessage(`‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: ${file.name}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPG –∏–ª–∏ PNG.`);
      console.error(`‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: ${file.name}`);
      return;
    }

    // üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10 –ú–ë)
    if (file.size > 10 * 1024 * 1024) {
      setErrorMessage(`‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: ${file.name}. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10 –ú–ë.`);
      console.error(`‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: ${file.name}`);
      return;
    }

    // üìå –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    const fileName = generateFileName(index, formData.title, file);

    // üìå –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const newImage: ImageData = {
      file,
      preview: URL.createObjectURL(file),
      title: fileName,
      data: `pereval_images/${fileName}`,
      isModified: true,
      id: formData.images[index]?.id,
    };

    // üìå –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log(`üì∑ –ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ—Ç ${index} (${slotLabels[index]}) –ª–æ–∫–∞–ª—å–Ω–æ: ${fileName}${newImage.id ? `, –∑–∞–º–µ–Ω—è–µ—Ç ID ${newImage.id}` : ''}`);

    // üìå –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    setFormData(prev => {
      const updatedImages = [...prev!.images];
      updatedImages[index] = newImage;
      return {
        ...prev!,
        images: updatedImages,
      };
    });

    setErrorMessage(null);
    e.target.value = "";
  };

  // üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Drag-and-Drop –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const handleDrop = (index: number, e: React.DragEvent<HTMLLabelElement>) => {
    e.preventDefault();
    if (!formData) return;
    const files = e.dataTransfer.files;
    if (files && files.length > 0) {
      const file = files[0];

      // üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
      if (!["image/jpeg", "image/png"].includes(file.type)) {
        setErrorMessage(`‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: ${file.name}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPG –∏–ª–∏ PNG.`);
        console.error(`‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: ${file.name}`);
        return;
      }

      // üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
      if (file.size > 10 * 1024 * 1024) {
        setErrorMessage(`‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: ${file.name}. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10 –ú–ë.`);
        console.error(`‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: ${file.name}`);
        return;
      }

      // üìå –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
      const fileName = generateFileName(index, formData.title, file);

      // üìå –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const newImage: ImageData = {
        file,
        preview: URL.createObjectURL(file),
        title: fileName,
        data: `pereval_images/${fileName}`,
        isModified: true,
        id: formData.images[index]?.id,
      };

      // üìå –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
      console.log(`üì∑ –ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ—Ç ${index} (${slotLabels[index]}) —á–µ—Ä–µ–∑ Drag-and-Drop: ${fileName}${newImage.id ? `, –∑–∞–º–µ–Ω—è–µ—Ç ID ${newImage.id}` : ''}`);

      // üìå –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      setFormData(prev => {
        const updatedImages = [...prev!.images];
        updatedImages[index] = newImage;
        return {
          ...prev!,
          images: updatedImages,
        };
      });

      setErrorMessage(null);
    }
  };

  // üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è dragover
  const handleDragOver = (e: React.DragEvent<HTMLLabelElement>) => {
    e.preventDefault();
  };

  // üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const handleDeleteImage = (index: number) => {
    if (!formData) return;
    const image = formData.images[index];
    if (!image) {
      console.log(`üóëÔ∏è –°–ª–æ—Ç ${index} (${slotLabels[index]}) —É–∂–µ –ø—É—Å—Ç`);
      return;
    }

    // üìå –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log(`üóëÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ª–æ—Ç–µ ${index} (${slotLabels[index]}) —É–¥–∞–ª–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ: ${image.title}${image.id ? ` (ID ${image.id})` : ''}`);

    // üìå –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –æ—á–∏—â–∞—è —Å–ª–æ—Ç
    setFormData(prev => {
      const updatedImages = [...prev!.images];
      if (updatedImages[index]?.preview && updatedImages[index]?.isModified) {
        URL.revokeObjectURL(updatedImages[index]!.preview);
      }
      updatedImages[index] = null;
      return {
        ...prev!,
        images: updatedImages,
      };
    });

    setErrorMessage(null);
  };

  // üìå –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–µ–∑–æ–Ω–∞
  const confirmSeasonModal = () => {
    setShowSeasonModal(false);
  };

  // üìå –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  const confirmDifficultyModal = () => {
    setShowDifficultyModal(false);
  };

  // üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞
  const getSeasonText = () => {
    if (!formData) return "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω";
    const seasonId = formData.difficulties[0].season;
    const season = seasons.find(s => s.id === seasonId);
    return season ? `${season.name} (${season.code})` : "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω";
  };

  // üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  const getDifficultyText = () => {
    if (!formData) return "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é";
    const difficultyId = formData.difficulties[0].difficulty;
    const difficulty = difficulties.find(d => d.id === difficultyId);
    return difficulty ? `${difficulty.code} - ${difficulty.description}` : "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é";
  };

  // üìå –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const validateForm = () => {
    if (!formData) return "–§–æ—Ä–º–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞";
    if (!formData.beautyTitle) return "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ";
    if (!formData.title) return "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ";
    if (!formData.user.email) return "Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.";
    if (!formData.coord.latitude) return "–®–∏—Ä–æ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞";
    if (!formData.coord.longitude) return "–î–æ–ª–≥–æ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞";
    if (!formData.coord.height) return "–í—ã—Å–æ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞";
    if (formData.difficulties[0].season === 0) return "–°–µ–∑–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω";
    if (formData.difficulties[0].difficulty === 0) return "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞";
    return null;
  };

  // üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const handleModalContentClick = (e: React.MouseEvent<HTMLDivElement>) => {
    e.stopPropagation();
  };

  // üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!formData || !initialFormData || !id) return;

    // üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—ã
    const validationError = validateForm();
    if (validationError) {
      setErrorMessage(`‚ùå ${validationError}`);
      console.log("üìã –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ formData:", formData);
      return;
    }

    setSubmitStatus("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞...");
    setErrorMessage(null);

    try {
      // üìå –®–∞–≥ 1 –∏ 2: –£–¥–∞–ª–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
      await uploadImages(formData, initialFormData, id, slotLabels);

      // üìå –®–∞–≥ 3: –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–∞–ª–∞ (–±–µ–∑ –ø–æ–ª—è images)
      const updatedData: any = { email: formData.user.email };

      if (formData.beautyTitle !== initialFormData.beautyTitle) {
        updatedData.beautyTitle = formData.beautyTitle;
      }
      if (formData.title !== initialFormData.title) {
        updatedData.title = formData.title;
      }
      if (formData.other_titles !== initialFormData.other_titles) {
        updatedData.other_titles = formData.other_titles;
      }
      if (formData.route_description !== initialFormData.route_description) {
        updatedData.route_description = formData.route_description;
      }
      if (
        formData.coord.latitude !== initialFormData.coord.latitude ||
        formData.coord.longitude !== initialFormData.coord.longitude ||
        formData.coord.height !== initialFormData.coord.height
      ) {
        updatedData.coord = {
          latitude: Number(formData.coord.latitude),
          longitude: Number(formData.coord.longitude),
          height: Number(formData.coord.height),
        };
      }
      if (
        formData.difficulties[0].season !== initialFormData.difficulties[0].season ||
        formData.difficulties[0].difficulty !== initialFormData.difficulties[0].difficulty
      ) {
        updatedData.difficulties = [
          {
            season: formData.difficulties[0].season,
            difficulty: formData.difficulties[0].difficulty,
          },
        ];
      }

      // üìå –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞
      console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–∞–ª–∞:", updatedData);

      const response = await fetch(`${API_URL}${id}/update/`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(updatedData),
      });

      const data: PerevalResponse = await response.json();
      console.log("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (PATCH):", data);

      if (response.status !== 200 || data.state !== 1) {
        throw new Error(data.message || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–∞–ª–∞");
      }

      setSubmitStatus("‚úÖ –ü–µ—Ä–µ–≤–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!");
      setTimeout(() => navigate(`/pereval/${id}`), 2000);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:", error);
      setErrorMessage(`‚ùå ${error instanceof Error ? error.message : "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"}`);
      setSubmitStatus(null);
    }
  };

  // üìå –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  if (!formData) return <p className="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞...</p>;

  return (
    <div className={`submit-container ${darkMode ? "dark-mode" : "light-mode"}`}>
      <h1 className="submit-title">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–∞–ª</h1>
      {errorMessage && <p className="error-message">{errorMessage}</p>}
      {submitStatus && <p className="submit-status">{submitStatus}</p>}

      <form onSubmit={handleSubmit} className="submit-form">
        <fieldset className="submit-section">
          <legend>–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–∞–ª–∞</legend>
          <div className="form-group">
            <label htmlFor="beautyTitle">–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞:</label>
            <input
              type="text"
              id="beautyTitle"
              name="beautyTitle"
              value={formData.beautyTitle}
              onChange={handleChange}
              className="submit-input"
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="title">–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞:</label>
            <input
              type="text"
              id="title"
              name="title"
              value={formData.title}
              onChange={handleChange}
              className="submit-input"
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="other_titles">–î—Ä—É–≥–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è:</label>
            <input
              type="text"
              id="other_titles"
              name="other_titles"
              value={formData.other_titles}
              onChange={handleChange}
              className="submit-input"
            />
          </div>
          <div className="form-group">
            <label htmlFor="route_description">–û–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞:</label>
            <textarea
              id="route_description"
              name="route_description"
              value={formData.route_description}
              onChange={handleChange}
              className="submit-input"
              rows={5}
            />
          </div>
        </fieldset>

        <fieldset className="submit-section">
          <legend>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</legend>
          <div className="form-group">
            <label htmlFor="latitude">–®–∏—Ä–æ—Ç–∞:</label>
            <input
              type="text"
              id="latitude"
              name="latitude"
              value={formData.coord.latitude}
              onChange={handleCoordChange}
              className="submit-input"
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="longitude">–î–æ–ª–≥–æ—Ç–∞:</label>
            <input
              type="text"
              id="longitude"
              name="longitude"
              value={formData.coord.longitude}
              onChange={handleCoordChange}
              className="submit-input"
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="height">–í—ã—Å–æ—Ç–∞:</label>
            <input
              type="text"
              id="height"
              name="height"
              value={formData.coord.height}
              onChange={handleCoordChange}
              className="submit-input"
              required
            />
          </div>
          <button type="button" onClick={handleGetGPS} disabled={loadingGPS} className="gps-btn">
            {loadingGPS ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–ü–æ–ª—É—á–∏—Ç—å —Å GPS"}
          </button>
        </fieldset>

        <fieldset className="submit-section">
          <legend>–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</legend>
          <div className="form-group">
            <label htmlFor="season">–°–µ–∑–æ–Ω:</label>
            <div
              className="submit-input submit-choice"
              onClick={() => setShowSeasonModal(true)}
            >
              {getSeasonText()}
            </div>
          </div>
          <div className="form-group">
            <label htmlFor="difficulty">–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:</label>
            <div
              className="submit-input submit-choice"
              onClick={() => setShowDifficultyModal(true)}
            >
              {getDifficultyText()}
            </div>
          </div>
        </fieldset>

        <fieldset className="submit-section">
          <legend>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</legend>
          <h2 className="upload-photos-title">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</h2>
          <div className="photo-slots">
            {[0, 1, 2].map(index => (
              <div key={index} className="photo-slot">
                {formData.images[index] === null ? (
                  // üìå –ü—É—Å—Ç–æ–π —Å–ª–æ—Ç
                  <label
                    className="photo-placeholder"
                    onDragOver={handleDragOver}
                    onDrop={(e) => handleDrop(index, e)}
                  >
                    <input
                      type="file"
                      accept="image/jpeg,image/png"
                      onChange={(e) => handleImageChange(index, e)}
                      className="hidden-input"
                    />
                    <span className="slot-label">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ, –Ω–∞–∂–∞–≤ –∑–¥–µ—Å—å</span>
                    <span className="slot-label slot-title">{slotLabels[index]}</span>
                  </label>
                ) : (
                  // üìå –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                  <div className="image-item">
                    <img
                      src={formData.images[index]!.preview}
                      alt={slotLabels[index]}
                      className="image-preview"
                      onError={() => console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${formData.images[index]!.preview}`)}
                    />
                    <span className="slot-label slot-title">{slotLabels[index]}</span>
                    <div className="image-actions">
                      <button
                        type="button"
                        onClick={() => handleDeleteImage(index)}
                        className="delete-btn"
                      >
                        –£–¥–∞–ª–∏—Ç—å
                      </button>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        </fieldset>

        <button type="submit" className="submit-btn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</button>
      </form>

      {showSeasonModal && (
        <div className="modal" onClick={() => setShowSeasonModal(false)}>
          <div className="modal-content" onClick={handleModalContentClick}>
            <h2>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω</h2>
            <div className="radio-container">
              {seasons.map(season => (
                <div key={season.id} className="radio-box">
                  <input
                    type="radio"
                    id={`season-${season.id}`}
                    name="season"
                    value={season.id}
                    checked={formData.difficulties[0].season === season.id}
                    onChange={handleDifficultyChange}
                  />
                  <label htmlFor={`season-${season.id}`}>
                    {season.name} ({season.code})
                  </label>
                </div>
              ))}
            </div>
            <button className="modal-btn" onClick={confirmSeasonModal}>
              –í—ã–±—Ä–∞—Ç—å
            </button>
          </div>
        </div>
      )}

      {showDifficultyModal && (
        <div className="modal" onClick={() => setShowDifficultyModal(false)}>
          <div className="modal-content" onClick={handleModalContentClick}>
            <h2>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</h2>
            <div className="radio-container">
              {difficulties.map(diff => (
                <div key={diff.id} className="radio-box">
                  <input
                    type="radio"
                    id={`difficulty-${diff.id}`}
                    name="difficulty"
                    value={diff.id}
                    checked={formData.difficulties[0].difficulty === diff.id}
                    onChange={handleDifficultyChange}
                  />
                  <label htmlFor={`difficulty-${diff.id}`}>
                    {diff.code} - {diff.description}
                  </label>
                </div>
              ))}
            </div>
            <button className="modal-btn" onClick={confirmDifficultyModal}>
              –í—ã–±—Ä–∞—Ç—å
            </button>
          </div>
        </div>
      )}

      <button onClick={toggleTheme} className="theme-btn">
        {darkMode ? "–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞" : "–¢—ë–º–Ω–∞—è —Ç–µ–º–∞"}
      </button>
    </div>
  );
};

export default EditPereval;