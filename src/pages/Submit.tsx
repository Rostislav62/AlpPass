// AlpPass/src/pages/Submit.tsx

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º React –∏ —Ö—É–∫–∏ useState, useEffect –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
import React, { useState, useEffect } from "react";
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º useNavigate –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
import { useNavigate } from "react-router-dom";
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏ –∏–∑ —Ñ–∞–π–ª–∞ index.css –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
import "../index.css";

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–ø—Å–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Submit
interface SubmitProps {
  darkMode: boolean; // –§–ª–∞–≥ —Ç—ë–º–Ω–æ–π —Ç–µ–º—ã
  toggleTheme: () => void; // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
interface FormData {
  beautyTitle: string; // –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
  title: string; // –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞
  other_titles: string; // –ú–µ—Å—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞
  connect: boolean; // –§–ª–∞–≥ —Å–≤—è–∑–∏ (true/false)
  user: { email: string; family_name: string; first_name: string; phone: string }; // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  coord: { latitude: string; longitude: string; height: string }; // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–µ–≤–∞–ª–∞
  status: number; // –°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 –¥–ª—è "new")
  difficulties: { season: number; difficulty: number }[]; // –°–ª–æ–∂–Ω–æ—Å—Ç–∏ (ID —Å–µ–∑–æ–Ω–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
  route_description: string; // –û–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
  images: any[]; // –ú–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ø–æ–∫–∞ –ø—É—Å—Ç–æ–π)
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–µ–∑–æ–Ω–∞ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
interface Season {
  id: number; // ID —Å–µ–∑–æ–Ω–∞
  code: string; // –ö–æ–¥ —Å–µ–∑–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "spring")
  name: string; // –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–í–µ—Å–Ω–∞")
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
interface Difficulty {
  id: number; // ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  code: string; // –ö–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1–ë")
  description: string; // –û–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü—Ä–æ—Å—Ç–∞—è")
  characteristics: string; // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ö—Ä—É—Ç—ã–µ —Å–∫–ª–æ–Ω—ã...")
  requirements: string; // –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ù–∞–≤—ã–∫–∏ —Ö–æ–∂–¥–µ–Ω–∏—è...")
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Submit –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–∞–ª–∞
const Submit: React.FC<SubmitProps> = ({ darkMode, toggleTheme }) => {
  const navigate = useNavigate();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
  const [formData, setFormData] = useState<FormData>({
    beautyTitle: "",
    title: "",
    other_titles: "",
    connect: true,
    user: {
      email: localStorage.getItem("user_email") || "",
      family_name: localStorage.getItem("user_family_name") || "",
      first_name: localStorage.getItem("user_first_name") || "",
      phone: localStorage.getItem("user_phone") || "",
    },
    coord: { latitude: "", longitude: "", height: "" },
    status: 1,
    difficulties: [{ season: 0, difficulty: 0 }],
    route_description: "",
    images: [],
  });

  const [submitStatus, setSubmitStatus] = useState<string | null>(null);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [loadingGPS, setLoadingGPS] = useState(false);
  const [seasons, setSeasons] = useState<Season[]>([]); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–∞–∫ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  const [difficulties, setDifficulties] = useState<Difficulty[]>([]); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–∞–∫ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  const [selectedDifficulty, setSelectedDifficulty] = useState<Difficulty | null>(null);

  const API_URL = process.env.REACT_APP_API_URL || "https://rostislav62.pythonanywhere.com";

  useEffect(() => {
    const fetchSeasons = async () => {
      try {
        console.log("–ó–∞–ø—Ä–æ—Å —Å–µ–∑–æ–Ω–æ–≤: –Ω–∞—á–∞–ª–æ");
        const response = await fetch(`${API_URL}/api/seasons/`);
        console.log("–ó–∞–ø—Ä–æ—Å —Å–µ–∑–æ–Ω–æ–≤: —Å—Ç–∞—Ç—É—Å", response.status);
        if (!response.ok) {
          throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–µ–∑–æ–Ω–æ–≤: ${response.status}`);
        }
        const data = await response.json();
        console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–µ–∑–æ–Ω—ã:", data);
        setSeasons(data);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–∑–æ–Ω–æ–≤:", error);
      }
    };

    const fetchDifficulties = async () => {
      try {
        console.log("–ó–∞–ø—Ä–æ—Å —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π: –Ω–∞—á–∞–ª–æ");
        const response = await fetch(`${API_URL}/api/difficulty-levels/`);
        console.log("–ó–∞–ø—Ä–æ—Å —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π: —Å—Ç–∞—Ç—É—Å", response.status);
        if (!response.ok) {
          throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π: ${response.status}`);
        }
        const data = await response.json();
        console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", data);
        setDifficulties(data);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π:", error);
      }
    };

    fetchSeasons();
    fetchDifficulties();
  }, [API_URL]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    console.log(`–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è ${name}: —Å—ã—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ "${value}"`);

    if (["latitude", "longitude", "height"].includes(name)) {
      setFormData((prev) => ({
        ...prev,
        coord: { ...prev.coord, [name]: value },
      }));
    } else if (["season", "difficulty"].includes(name)) {
      const newValue = parseInt(value, 10);
      if (isNaN(newValue)) {
        console.error(`–û—à–∏–±–∫–∞: ${name} –ø–æ–ª—É—á–∏–ª –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ "${value}"`);
        return;
      }
      console.log(`–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ${name}: ${newValue}`);
      setFormData((prev) => {
        const updatedDifficulties = [{ ...prev.difficulties[0], [name]: newValue }];
        console.log("–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ difficulties:", updatedDifficulties);
        return {
          ...prev,
          difficulties: updatedDifficulties,
        };
      });
      if (name === "difficulty" && newValue !== 0) {
        const selected = difficulties.find((diff) => diff.id === newValue) || null;
        console.log("–í—ã–±—Ä–∞–Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:", selected);
        setSelectedDifficulty(selected);
      }
    } else {
      setFormData((prev) => ({ ...prev, [name]: value }));
    }
  };

  const handleGetGPS = () => {
    if ("geolocation" in navigator) {
      setLoadingGPS(true);
      setErrorMessage(null);
      navigator.geolocation.getCurrentPosition(
        (position) => {
          setFormData((prev) => ({
            ...prev,
            coord: {
              latitude: position.coords.latitude.toFixed(6),
              longitude: position.coords.longitude.toFixed(6),
              height: position.coords.altitude ? position.coords.altitude.toFixed(0) : prev.coord.height,
            },
          }));
          setLoadingGPS(false);
          if (!position.coords.altitude) {
            setErrorMessage("‚ö†Ô∏è –í—ã—Å–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é");
          }
        },
        (error) => {
          setErrorMessage(`‚ùå –û—à–∏–±–∫–∞ GPS: ${error.message}`);
          setLoadingGPS(false);
        },
        { enableHighAccuracy: true }
      );
    } else {
      setErrorMessage("‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º");
    }
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (
      !formData.beautyTitle ||
      !formData.title ||
      !formData.user.email ||
      !formData.user.family_name ||
      !formData.user.first_name ||
      !formData.user.phone ||
      !formData.coord.latitude ||
      !formData.coord.longitude ||
      !formData.coord.height ||
      formData.difficulties[0].season === 0 ||
      formData.difficulties[0].difficulty === 0
    ) {
      setErrorMessage("‚ùå –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!");
      console.log("–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ formData:", formData);
      return;
    }

    setSubmitStatus("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞...");
    setErrorMessage(null);

    try {
      console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–∞–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", formData);
      const perevalResponse = await fetch(`${API_URL}/api/submitData/`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });

      const perevalData = await perevalResponse.json();
      console.log("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–ø–µ—Ä–µ–≤–∞–ª):", perevalData);

      if (!perevalResponse.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${perevalData.message || JSON.stringify(perevalData)}`);
      }

      const perevalId = perevalData.id;
      localStorage.setItem("last_pereval_id", perevalId);
      setSubmitStatus("‚úÖ –ü–µ—Ä–µ–≤–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...");

      setTimeout(() => navigate(`/add-images/${perevalId}`), 1000);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
      setErrorMessage(`‚ùå –û—à–∏–±–∫–∞: ${(error as Error).message}`);
      setSubmitStatus(null);
    }
  };

  return (
    <div className={`submit-container ${darkMode ? "dark-mode" : "light-mode"}`}>
      <h1 className="submit-title">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–µ—Ä–µ–≤–∞–ª</h1>
      {errorMessage && <p className="error-message">{errorMessage}</p>}
      {submitStatus && <p className="submit-status">{submitStatus}</p>}
      <form onSubmit={handleSubmit} className="submit-form">
        <fieldset className="submit-section">
          <legend>–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–∞–ª–∞</legend>
          <div className="form-group">
            <label htmlFor="beautyTitle">–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞:</label>
            <input
              type="text"
              id="beautyTitle"
              name="beautyTitle"
              value={formData.beautyTitle}
              onChange={handleChange}
              className="submit-input"
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="title">–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞:</label>
            <input
              type="text"
              id="title"
              name="title"
              value={formData.title}
              onChange={handleChange}
              className="submit-input"
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="other_titles">–ú–µ—Å—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞:</label>
            <input
              type="text"
              id="other_titles"
              name="other_titles"
              value={formData.other_titles}
              onChange={handleChange}
              className="submit-input"
            />
          </div>
          <div className="form-group">
            <label htmlFor="route_description">–û–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞:</label>
            <textarea
              id="route_description"
              name="route_description"
              value={formData.route_description}
              onChange={handleChange}
              className="submit-input"
              rows={3}
            />
          </div>
        </fieldset>

        <fieldset className="submit-section">
          <legend>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</legend>
          <div className="form-group">
            <label htmlFor="latitude">–®–∏—Ä–æ—Ç–∞:</label>
            <input
              type="text"
              id="latitude"
              name="latitude"
              value={formData.coord.latitude}
              onChange={handleChange}
              className="submit-input"
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="longitude">–î–æ–ª–≥–æ—Ç–∞:</label>
            <input
              type="text"
              id="longitude"
              name="longitude"
              value={formData.coord.longitude}
              onChange={handleChange}
              className="submit-input"
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="height">–í—ã—Å–æ—Ç–∞:</label>
            <input
              type="text"
              id="height"
              name="height"
              value={formData.coord.height}
              onChange={handleChange}
              className="submit-input"
              required
            />
          </div>
          <button type="button" onClick={handleGetGPS} disabled={loadingGPS} className="gps-btn">
            {loadingGPS ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–ü–æ–ª—É—á–∏—Ç—å —Å GPS"}
          </button>
        </fieldset>

        <fieldset className="submit-section">
          <legend>–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</legend>
          <div className="form-group">
            <label htmlFor="season">–°–µ–∑–æ–Ω:</label>
            <select
              id="season"
              name="season"
              value={formData.difficulties[0].season}
              onChange={handleChange}
              className="submit-input"
              required
            >
              <option value={0}>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω</option>
              {seasons && seasons.length > 0 ? (
                seasons.map((season) => (
                  <option key={season.id} value={season.id}>
                    {season.name} ({season.code})
                  </option>
                ))
              ) : (
                <option value={0}>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–∑–æ–Ω–æ–≤...</option>
              )}
            </select>
          </div>
          <div className="form-group">
            <label htmlFor="difficulty">–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:</label>
            <select
              id="difficulty"
              name="difficulty"
              value={formData.difficulties[0].difficulty}
              onChange={handleChange}
              className="submit-input"
              required
            >
              <option value={0}>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å</option>
              {difficulties && difficulties.length > 0 ? (
                difficulties.map((diff) => (
                  <option key={diff.id} value={diff.id}>
                    {diff.code} - {diff.description}
                  </option>
                ))
              ) : (
                <option value={0}>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π...</option>
              )}
            </select>
            {selectedDifficulty && (
              <div className="difficulty-details">
                <p><strong>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</strong> {selectedDifficulty.characteristics}</p>
                <p><strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</strong> {selectedDifficulty.requirements}</p>
              </div>
            )}
          </div>
        </fieldset>

        <button type="submit" className="submit-btn">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
      </form>
      <button onClick={toggleTheme} className="theme-btn">
        {darkMode ? "–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞" : "–¢—ë–º–Ω–∞—è —Ç–µ–º–∞"}
      </button>
    </div>
  );
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Submit –∫–∞–∫ default
export default Submit;