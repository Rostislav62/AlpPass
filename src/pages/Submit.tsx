// AlpPass/src/pages/Submit.tsx

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º React –∏ —Ö—É–∫–∏ useState –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
import React, { useState } from "react";
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º useNavigate –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
import { useNavigate } from "react-router-dom";
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏ –∏–∑ —Ñ–∞–π–ª–∞ index.css –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
import "../index.css";

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–ø—Å–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Submit
interface SubmitProps {
  darkMode: boolean;
  toggleTheme: () => void;
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
interface FormData {
  beautyTitle: string;
  title: string;
  other_titles: string;
  connect: boolean;
  user: { email: string; family_name: string; first_name: string; phone: string };
  coord: { latitude: string; longitude: string; height: string };
  status: number;
  difficulties: { season: number; difficulty: number }[];
  route_description: string;
  images: any[];
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Submit –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–∞–ª–∞
const Submit: React.FC<SubmitProps> = ({ darkMode, toggleTheme }) => {
  const navigate = useNavigate();

  const [formData, setFormData] = useState<FormData>({
    beautyTitle: "",
    title: "",
    other_titles: "",
    connect: true,
    user: {
      email: localStorage.getItem("user_email") || "",
      family_name: localStorage.getItem("user_family_name") || "",
      first_name: localStorage.getItem("user_first_name") || "",
      phone: localStorage.getItem("user_phone") || "",
    },
    coord: { latitude: "", longitude: "", height: "" },
    status: 1,
    difficulties: [{ season: 0, difficulty: 0 }],
    route_description: "",
    images: [],
  });

  const [submitStatus, setSubmitStatus] = useState<string | null>(null);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [loadingGPS, setLoadingGPS] = useState(false);

  const seasons = [
    { id: 1, name: "–í–µ—Å–Ω–∞", code: "Spring" },
    { id: 2, name: "–õ–µ—Ç–æ", code: "Summer" },
    { id: 3, name: "–û—Å–µ–Ω—å", code: "Autumn" },
    { id: 4, name: "–ó–∏–º–∞", code: "Winter" },
  ];

  const difficulties = [
    { id: 1, code: "1–ê", description: "–û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è", characteristics: "–ü–æ–ª–æ–≥–∏–µ —Å–∫–ª–æ–Ω—ã, –≤—ã—Å–æ—Ç–∞ –¥–æ 3000 –º", requirements: "–ë–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏, –æ–±—É–≤—å –¥–ª—è —Ç—Ä–µ–∫–∫–∏–Ω–≥–∞" },
    { id: 2, code: "1–ë", description: "–ü—Ä–æ—Å—Ç–∞—è", characteristics: "–ö—Ä—É—Ç—ã–µ —Å–∫–ª–æ–Ω—ã, —Å–Ω–µ–∂–Ω–∏–∫–∏, –≤—ã—Å–æ—Ç–∞ 3000‚Äì3500 –º", requirements: "–ù–∞–≤—ã–∫–∏ —Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ —Å–Ω–µ–≥—É, —Ç—Ä–µ–∫–∫–∏–Ω–≥–æ–≤—ã–µ –ø–∞–ª–∫–∏" },
    { id: 3, code: "2–ê", description: "–°—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏", characteristics: "–°–∫–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏, —Å–Ω–µ–∂–Ω—ã–µ –ø–æ–ª—è, –≤—ã—Å–æ—Ç–∞ 3500‚Äì4000 –º", requirements: "–í–µ—Ä—ë–≤–∫–∏, —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞, –±–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∞–ª—å–ø–∏–Ω–∏–∑–º–∞" },
    { id: 4, code: "2–ë", description: "–£–º–µ—Ä–µ–Ω–Ω–æ —Å–ª–æ–∂–Ω–∞—è", characteristics: "–°–ª–æ–∂–Ω—ã–µ —Å–∫–∞–ª—ã, –ª—ë–¥, –≤—ã—Å–æ—Ç–∞ 4000‚Äì4500 –º", requirements: "–ö–æ—à–∫–∏, –ª–µ–¥–æ—Ä—É–±, –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –≤–µ—Ä—ë–≤–∫–∞–º–∏" },
    { id: 5, code: "3–ê", description: "–°–ª–æ–∂–Ω–∞—è", characteristics: "–õ–µ–¥–æ–≤—ã–µ —É—á–∞—Å—Ç–∫–∏, –æ—Ç–≤–µ—Å–Ω—ã–µ —Å–∫–∞–ª—ã, –≤—ã—Å–æ—Ç–∞ 4500‚Äì5000 –º", requirements: "–ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –∞–ª—å–ø–∏–Ω–∏—Å—Ç—Å–∫–æ–≥–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è, –æ–ø—ã—Ç" },
    { id: 6, code: "3–ë", description: "–û—á–µ–Ω—å —Å–ª–æ–∂–Ω–∞—è", characteristics: "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, –≤—ã—Å–æ—Ç–∞ —Å–≤—ã—à–µ 5000 –º", requirements: "–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, –∫–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞" },
  ];

  const API_URL = process.env.REACT_APP_API_URL || "https://rostislav62.pythonanywhere.com";

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    console.log(`–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è ${name}: –∑–Ω–∞—á–µ–Ω–∏–µ "${value}"`);

    if (["latitude", "longitude", "height"].includes(name)) {
      setFormData((prev) => ({
        ...prev,
        coord: { ...prev.coord, [name]: value },
      }));
    } else if (["season", "difficulty"].includes(name)) {
      const newValue = parseInt(value, 10);
      if (isNaN(newValue)) {
        console.error(`–û—à–∏–±–∫–∞: ${name} –ø–æ–ª—É—á–∏–ª –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ "${value}"`);
        return;
      }
      console.log(`–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ${name}: ${newValue}`);
      setFormData((prev) => ({
        ...prev,
        difficulties: [{ ...prev.difficulties[0], [name]: newValue }],
      }));
    } else {
      setFormData((prev) => ({ ...prev, [name]: value }));
    }
  };

  const handleGetGPS = () => {
    if ("geolocation" in navigator) {
      setLoadingGPS(true);
      setErrorMessage(null);
      navigator.geolocation.getCurrentPosition(
        (position) => {
          setFormData((prev) => ({
            ...prev,
            coord: {
              latitude: position.coords.latitude.toFixed(6),
              longitude: position.coords.longitude.toFixed(6),
              height: position.coords.altitude ? position.coords.altitude.toFixed(0) : prev.coord.height,
            },
          }));
          setLoadingGPS(false);
          if (!position.coords.altitude) {
            setErrorMessage("‚ö†Ô∏è –í—ã—Å–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é");
          }
        },
        (error) => {
          setErrorMessage(`‚ùå –û—à–∏–±–∫–∞ GPS: ${error.message}`);
          setLoadingGPS(false);
        },
        { enableHighAccuracy: true }
      );
    } else {
      setErrorMessage("‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º");
    }
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (
      !formData.beautyTitle ||
      !formData.title ||
      !formData.user.email ||
      !formData.user.family_name ||
      !formData.user.first_name ||
      !formData.user.phone ||
      !formData.coord.latitude ||
      !formData.coord.longitude ||
      !formData.coord.height ||
      formData.difficulties[0].season === 0 ||
      formData.difficulties[0].difficulty === 0
    ) {
      setErrorMessage("‚ùå –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!");
      console.log("–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ formData:", formData);
      return;
    }

    setSubmitStatus("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞...");
    setErrorMessage(null);

    try {
      console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–∞–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", formData);
      const perevalResponse = await fetch(`${API_URL}/api/submitData/`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });

      const perevalData = await perevalResponse.json();
      console.log("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–ø–µ—Ä–µ–≤–∞–ª):", perevalData);

      if (!perevalResponse.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${perevalData.message || JSON.stringify(perevalData)}`);
      }

      const perevalId = perevalData.id;
      localStorage.setItem("last_pereval_id", perevalId);
      setSubmitStatus("‚úÖ –ü–µ—Ä–µ–≤–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...");

      setTimeout(() => navigate(`/add-images/${perevalId}`), 1000);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
      setErrorMessage(`‚ùå –û—à–∏–±–∫–∞: ${(error as Error).message}`);
      setSubmitStatus(null);
    }
  };

  return (
    <div className={`submit-container ${darkMode ? "dark-mode" : "light-mode"}`}>
      <h1 className="submit-title">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–µ—Ä–µ–≤–∞–ª</h1>
      {errorMessage && <p className="error-message">{errorMessage}</p>}
      {submitStatus && <p className="submit-status">{submitStatus}</p>}
      <form onSubmit={handleSubmit} className="submit-form">
        <fieldset className="submit-section">
          <legend>–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–∞–ª–∞</legend>
          <div className="form-group">
            <label htmlFor="beautyTitle">–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞:</label>
            <input
              type="text"
              id="beautyTitle"
              name="beautyTitle"
              value={formData.beautyTitle}
              onChange={handleChange}
              className="submit-input"
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="title">–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞:</label>
            <input
              type="text"
              id="title"
              name="title"
              value={formData.title}
              onChange={handleChange}
              className="submit-input"
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="other_titles">–ú–µ—Å—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞:</label>
            <input
              type="text"
              id="other_titles"
              name="other_titles"
              value={formData.other_titles}
              onChange={handleChange}
              className="submit-input"
            />
          </div>
          <div className="form-group">
            <label htmlFor="route_description">–û–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞:</label>
            <textarea
              id="route_description"
              name="route_description"
              value={formData.route_description}
              onChange={handleChange}
              className="submit-input"
              rows={3}
            />
          </div>
        </fieldset>

        <fieldset className="submit-section">
          <legend>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</legend>
          <div className="form-group">
            <label htmlFor="latitude">–®–∏—Ä–æ—Ç–∞:</label>
            <input
              type="text"
              id="latitude"
              name="latitude"
              value={formData.coord.latitude}
              onChange={handleChange}
              className="submit-input"
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="longitude">–î–æ–ª–≥–æ—Ç–∞:</label>
            <input
              type="text"
              id="longitude"
              name="longitude"
              value={formData.coord.longitude}
              onChange={handleChange}
              className="submit-input"
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="height">–í—ã—Å–æ—Ç–∞:</label>
            <input
              type="text"
              id="height"
              name="height"
              value={formData.coord.height}
              onChange={handleChange}
              className="submit-input"
              required
            />
          </div>
          <button type="button" onClick={handleGetGPS} disabled={loadingGPS} className="gps-btn">
            {loadingGPS ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–ü–æ–ª—É—á–∏—Ç—å —Å GPS"}
          </button>
        </fieldset>

        <fieldset className="submit-section">
          <legend>–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</legend>
          <div className="form-group radio-group">
            <label>–°–µ–∑–æ–Ω:</label>
            <div className="radio-container">
              {seasons.map((season) => (
                <div key={season.id} className="radio-box">
                  <input
                    type="radio"
                    id={`season-${season.id}`}
                    name="season"
                    value={season.id}
                    checked={formData.difficulties[0].season === season.id}
                    onChange={handleChange}
                  />
                  <label htmlFor={`season-${season.id}`}>{season.name} ({season.code})</label>
                </div>
              ))}
            </div>
          </div>
          <div className="form-group radio-group">
            <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:</label>
            <div className="radio-container">
              {difficulties.map((diff) => (
                <div key={diff.id} className="radio-box">
                  <input
                    type="radio"
                    id={`difficulty-${diff.id}`}
                    name="difficulty"
                    value={diff.id}
                    checked={formData.difficulties[0].difficulty === diff.id}
                    onChange={handleChange}
                  />
                  <label htmlFor={`difficulty-${diff.id}`}>
                    {diff.code} - {diff.description}
                  </label>
                </div>
              ))}
            </div>
          </div>
        </fieldset>

        <button type="submit" className="submit-btn">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
      </form>
      <button onClick={toggleTheme} className="theme-btn">
        {darkMode ? "–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞" : "–¢—ë–º–Ω–∞—è —Ç–µ–º–∞"}
      </button>
    </div>
  );
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Submit –∫–∞–∫ default
export default Submit;